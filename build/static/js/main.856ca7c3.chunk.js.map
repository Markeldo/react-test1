{"version":3,"sources":["Drop/Drop.js","context.js","ListItem/ListItem.js","List/List.js","App.js","serviceWorker.js","index.js"],"names":["status","default","className","message","hovered","hoveredOut","dropped","parsed","Drop","props","useState","dropState","setDropState","worker","Worker","addEventListener","e","onGetList","data","preventDrag","stopPropagation","preventDefault","classList","join","onDragLeave","bind","this","onDragOver","onDrop","reader","FileReader","readAsText","dataTransfer","files","onload","postMessage","str","result","Context","React","createContext","ListItem","onDeleteHandler","useContext","user","onClick","id","List","onScroll","target","scrollTop","style","height","dummyBeforeHeight","listItems","map","item","key","dummyAfterHeight","App","list","setList","startRenderFrom","common","setCommon","defineDummiesHeight","scrolledPixels","listLength","from","d1h","d2h","length","slicedList","slice","index","onGetListHandler","Provider","value","concat","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.856ca7c3.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport './Drop.css'\r\n\r\n/**\r\n * onDrag onDragEnd onDragEnter onDragExit onDragLeave onDragOver onDragStart onDrop\r\n */\r\nconst status = {\r\n    default: {\r\n        className: \"\",\r\n        message: \"Feed me with JSON\"\r\n    },\r\n    hovered: {\r\n        className: \"drop--feed-me\",\r\n        message: \"Oh, come on. Let it fall\"\r\n    },\r\n    hoveredOut: {\r\n        className: \"\",\r\n        message: \"Don't be greedy\"\r\n    },\r\n    dropped: {\r\n        className: \"drop--eating\",\r\n        message: \"yum-yum...üçå\"\r\n    },\r\n    parsed: {\r\n        className: \"drop--ate\",\r\n        message: \"yummy...üòã Drop something more\"\r\n    },\r\n};\r\nexport default function Drop (props) {\r\n\r\n    const [dropState, setDropState] = useState({\r\n        status: 'default'\r\n      })\r\n\r\n    const worker = new Worker('/workers/parseObj.js')\r\n\r\n    worker.addEventListener('message', e => {\r\n        props.onGetList(e.data);\r\n        setDropState({ status: 'parsed' })\r\n    }, false)\r\n\r\n    const preventDrag = (e) => {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n    }\r\n    const handleDragOut = (e) => {\r\n        preventDrag(e);\r\n        setDropState({ status: \"hoveredOut\" })\r\n    }\r\n    const handleDragOver = (e) => {\r\n        preventDrag(e);\r\n        setDropState({ status: \"hovered\" })\r\n    }\r\n    const handleFileSelect = (e) => {\r\n        setDropState({ status: \"dropped\" })\r\n        preventDrag(e);\r\n        let reader = new FileReader();\r\n        reader.readAsText(e.dataTransfer.files[0]);\r\n        reader.onload = () => {\r\n            worker.postMessage({ str: reader.result });\r\n        };\r\n\r\n    }\r\n    let classList = ['drop',status[dropState.status].className]\r\n    return (\r\n        <div>\r\n            <div className={classList.join(\" \")}\r\n                onDragLeave={handleDragOut.bind(this)}\r\n                onDragOver={handleDragOver.bind(this)}\r\n                onDrop={handleFileSelect}>\r\n                <div className=\"message\">{status[dropState.status].message}</div>\r\n                <div className=\"eye\"></div>\r\n                <div className=\"eye eye--right\"></div>\r\n                <div className=\"mouth\"></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react'\r\n\r\nconst Context = React.createContext()\r\n\r\nexport default Context","import React, { useContext } from 'react'\r\nimport Context from '../context'\r\n\r\nconst ListItem = (props) => {\r\n    const { onDeleteHandler } = useContext(Context)\r\n    return (\r\n        <li>\r\n            {props.user}<span onClick={onDeleteHandler.bind(null,props.id)}></span>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default ListItem\r\n","import React from 'react'\r\nimport ListItem from '../ListItem/ListItem'\r\n\r\nconst List = (props) => {\r\n    return (\r\n        <ul onScroll={(e) => props.onScroll(e.target.scrollTop)}>\r\n            <li className=\"dummy dummy--before\" style={{ height: props.dummyBeforeHeight }}></li>\r\n            {props.listItems.map(item => {\r\n                return <ListItem key={item.id} id={item.id} user={item.user} />\r\n            }) }\r\n            <li className=\"dummy dummy--after\" style={{ height: props.dummyAfterHeight }}></li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default List\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Drop from './Drop/Drop'\nimport List from './List/List'\nimport Context from './context'\n\nexport default function App(props) {\n  const [list, setList] = useState([]) // —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n  const [common, setCommon] = useState({\n    dummyBeforeHeight: 0,           // –≤—ã—Å–æ—Ç–∞ –±–æ–ª–≤–∞–Ω–∫–∏ –ø–µ—Ä–µ–¥ –∫—É—Å–∫–æ–º –≤—ã–≤–æ–¥–∏–º–æ–≥–æ —Å–ø–∏—Å–∫–∞\n    dummyAfterHeight: 0,            // –≤—ã—Å–æ—Ç–∞ –±–æ–ª–≤–∞–Ω–∫–∏ –ø–æ–¥ –∫—É—Å–∫–æ–º –≤—ã–≤–æ–¥–∏–º–æ–≥–æ —Å–ø–∏—Å–∫–∞\n    startRenderFrom: 0,             // —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è, —Å –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –±—Ä–∞—Ç—å—Å—è –∫—É—Å–æ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞\n  })\n  const renderItemsCount = 10\n\n  const onGetListHandler = (list) => {\n    setList(list.map((item, index) => ({ id: index, user: item })))\n    defineDummiesHeight(0, list.length);\n  }\n\n  const onDeleteHandler = (id) => {\n    setList(list.concat().filter(item => item.id !== id));\n  }\n\n  const defineDummiesHeight = (scrolledPixels = 0, listLength = null) => {\n    listLength = !listLength ? list.length : listLength;\n    const from = (scrolledPixels - scrolledPixels % 42) / 42    // 42 - –≤—ã—Å–æ—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞, –∂—ë—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω–∞—è –≤ CSS\n    const d1h = (from) * 42\n    const d2h = (listLength - from - renderItemsCount) * 42\n\n    setCommon({\n      startRenderFrom: from,\n      dummyBeforeHeight: d1h < 0 ? 0 : d1h,\n      dummyAfterHeight: d2h < 0 ? 0 : d2h\n    })\n  }\n\n  const slicedList = list.slice(common.startRenderFrom, common.startRenderFrom + renderItemsCount)\n\n  return (\n      <div className=\"app\">\n\n        <Drop onGetList={list => { onGetListHandler(list); }} />\n\n        <Context.Provider value={{ onDeleteHandler }}>\n        <List\n          onScroll={defineDummiesHeight}\n          listItems={slicedList}\n          dummyAfterHeight={common.dummyAfterHeight}\n          dummyBeforeHeight={common.dummyBeforeHeight}\n        />\n        </Context.Provider>\n\n      </div>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}