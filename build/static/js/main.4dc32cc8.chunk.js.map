{"version":3,"sources":["Drop/Drop.js","App.js","serviceWorker.js","index.js"],"names":["status","default","className","message","hovered","hoveredOut","dropped","parsed","Drop","props","state","worker","Worker","list","addEventListener","e","onGetList","data","setState","handleFileSelect","bind","stopPropagation","preventDefault","this","preventDrag","console","log","reader","FileReader","readAsText","dataTransfer","files","onload","postMessage","str","result","classList","push","join","onDragLeave","handleDragOut","onDragOver","handleDragOver","onDrop","Component","timeout","App","scrollTop","dummyBeforeHeight","dummyAfterHeight","startRenderFrom","renderItemsCount","ulRef","React","createRef","map","item","index","id","user","defineDummiesHeight","findIndex","x","concat","splice","scrolledPixels","from","d1h","d2h","length","setTimeout","current","slice","key","onClick","deleteItem","setList","ref","onScroll","onScrollHandler","style","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.4dc32cc8.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Drop.css'\r\n\r\n/**\r\n * onDrag onDragEnd onDragEnter onDragExit onDragLeave onDragOver onDragStart onDrop\r\n */\r\nconst status = {\r\n    default: {\r\n        className: \"\",\r\n        message: \"Feed me with JSON\"\r\n    },\r\n    hovered: {\r\n        className: \"drop--feed-me\",\r\n        message: \"Oh, come on. Let it fall\"\r\n    },\r\n    hoveredOut: {\r\n        className: \"\",\r\n        message: \"Don't be greedy\"\r\n    },\r\n    dropped: {\r\n        className: \"drop--eating\",\r\n        message: \"yum-yum...üçå\"\r\n    },\r\n    parsed: {\r\n        className: \"drop--ate\",\r\n        message: \"yummy...üòã Drop something more\"\r\n    },\r\n};\r\nexport default class Drop extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            status: 'default',\r\n            worker: new Worker('/workers/parseObj.js'),\r\n            list: []\r\n        }\r\n        this.state.worker.addEventListener('message', e => {\r\n            //this.state.list = e.data;\r\n            this.props.onGetList(e.data);\r\n            this.setState({ status: 'parsed' })\r\n            /*self.$store.dispatch(\"updateStore\", {\r\n                incoming: e.data,\r\n              });*/\r\n        }, false);\r\n        this.handleFileSelect = this.handleFileSelect.bind(this)\r\n    }\r\n\r\n    preventDrag(e) {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n    }\r\n    handleDragOut(e) {\r\n        this.preventDrag(e);\r\n        this.setState({ status: \"hoveredOut\" })\r\n    }\r\n    handleDragOver(e) {\r\n        this.preventDrag(e);\r\n        this.setState({ status: \"hovered\" })\r\n    }\r\n    handleFileSelect(e) {\r\n        this.setState({ status: \"dropped\" })\r\n        this.preventDrag(e);\r\n        console.log(this.state);\r\n        let reader = new FileReader();\r\n        reader.readAsText(e.dataTransfer.files[0]);\r\n        reader.onload = () => {\r\n            this.state.worker.postMessage({ str: reader.result });\r\n        };\r\n\r\n    }\r\n    render() {\r\n        let classList = ['drop'];\r\n        classList.push(status[this.state.status].className);\r\n        return (\r\n            <div>\r\n                <div className={classList.join(\" \")}\r\n                    onDragLeave={this.handleDragOut.bind(this)}\r\n                    onDragOver={this.handleDragOver.bind(this)}\r\n                    onDrop={this.handleFileSelect}>\r\n                    <div className=\"message\">{status[this.state.status].message}</div>\r\n                    <div className=\"eye\"></div>\r\n                    <div className=\"eye eye--right\"></div>\r\n                    <div className=\"mouth\"></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Drop from './Drop/Drop'\n\nlet timeout = false;                  // —Ñ–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è —Ç–∞–π–º–∞—É—Ç–∞ –ø—Ä–∏—à–ª–æ—Å—å –≤—ã–Ω–µ—Å—Ç–∏ –∏–∑ state –∏–∑-–∑–∞ —Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      scrollTop: 0,                   // –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–¢–æ–ø–∞\n      list: [],                       // —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n      dummyBeforeHeight: 0,           // –≤—ã—Å–æ—Ç–∞ –±–æ–ª–≤–∞–Ω–∫–∏ –ø–µ—Ä–µ–¥ –∫—É—Å–∫–æ–º –≤—ã–≤–æ–¥–∏–º–æ–≥–æ —Å–ø–∏—Å–∫–∞\n      dummyAfterHeight: 0,            // –≤—ã—Å–æ—Ç–∞ –±–æ–ª–≤–∞–Ω–∫–∏ –ø–æ–¥ –∫—É—Å–∫–æ–º –≤—ã–≤–æ–¥–∏–º–æ–≥–æ —Å–ø–∏—Å–∫–∞\n      startRenderFrom: 0,             // —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è, —Å –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –±—Ä–∞—Ç—å—Å—è –∫—É—Å–æ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞\n      renderItemsCount: 200           // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –≤—ã–≤–æ–¥–∏–º—ã—Ö –≤ –∫—É—Å–∫–µ. –ú–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –Ω–∞ –ª—é–±–æ–µ > 0\n    }\n    this.ulRef = React.createRef()\n  }\n  setList(list) {\n    this.setState({\n      list: list.map((item, index) => ({ id: index, user: item }))\n    });\n    this.defineDummiesHeight();\n  }\n  deleteItem(id) {\n    let index = this.state.list.findIndex(x => x.id === id)\n    if (index === -1) {\n      return;\n    }\n    const list = this.state.list.concat();\n    list.splice(index, 1);\n    this.setState({ list });\n  }\n  defineDummiesHeight(scrolledPixels) {\n    if (!scrolledPixels) {\n      scrolledPixels = 0;\n    }\n    let from = (scrolledPixels - scrolledPixels % 42) / 42    // 42 - –≤—ã—Å–æ—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞, –∂—ë—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω–∞—è –≤ CSS\n    let d1h = (from) * 42\n    let d2h = (this.state.list.length - from - this.state.renderItemsCount) * 42\n    if (scrolledPixels > this.state.scrollTop) {              // –∫–æ—Å—Ç—ã–ª—å –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞ –≤–Ω–∏–∑\n      setTimeout(() => {\n        this.ulRef.current.scrollTop = scrolledPixels;\n      }, 50)                                                  // 50 - —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ\n    }\n    this.setState({\n      scrollTop: scrolledPixels,\n      startRenderFrom: from,\n      dummyBeforeHeight: d1h < 0 ? 0 : d1h,\n      dummyAfterHeight: d2h < 0 ? 0 : d2h\n    })\n  }\n  onScrollHandler(e) {\n\n    if (!timeout) {                                           // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ\n      timeout = true;\n      setTimeout(() => {\n        this.defineDummiesHeight(this.ulRef.current.scrollTop)\n        timeout = false;\n      }, 50);                                                 // 50 - —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ\n    }\n  }\n  render() {\n    let list = null;\n    if (this.state.list.length > 0) {\n      list = this.state.list.slice(this.state.startRenderFrom, this.state.startRenderFrom + this.state.renderItemsCount).map(item => {\n        return (\n          <li key={item.id}>\n            {item.user}<span onClick={this.deleteItem.bind(this, item.id)}></span>\n          </li>\n        )\n      })\n    }\n    return (\n      <div className=\"app\">\n        <Drop onGetList={list => this.setList(list)} />\n        {/*<div>–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤</div>\n        <button onClick={() => { this.ulRef.current.scrollTop = this.ulRef.current.scrollTop + 300 }}>Scroll</button>\n        <span>total: {this.state.list.length}</span>\n        <span>startRenderFrom: {this.state.startRenderFrom}, </span>\n        <span>dummyBeforeHeight: {this.state.dummyBeforeHeight}, </span>\n        <span>dummyAfterHeight: {this.state.dummyAfterHeight}, </span>\n    <span>totalHeight: {this.state.list.length * 42} </span>*/}\n        <ul ref={this.ulRef} onScroll={this.onScrollHandler.bind(this)}>\n          <li className=\"dummy dummy--before\" style={{ height: this.state.dummyBeforeHeight }}></li>\n          {list}\n          {<li className=\"dummy dummy--after\" style={{ height: this.state.dummyAfterHeight }}></li>}\n        </ul>\n      </div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}